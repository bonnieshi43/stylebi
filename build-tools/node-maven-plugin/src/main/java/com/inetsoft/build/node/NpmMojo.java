/*
 * This file is part of StyleBI.
 * Copyright (C) 2024  InetSoft Technology
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package com.inetsoft.build.node;

import com.github.eirslett.maven.plugins.frontend.lib.*;
import org.apache.maven.plugin.*;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.*;

import java.io.File;
import java.util.Collections;
import java.util.Map;

@Mojo(name = "npm", defaultPhase = LifecyclePhase.GENERATE_RESOURCES, threadSafe = true)
public class NpmMojo extends AbstractMojo {
   /**
    * npm arguments. Default is "install".
    */
   @Parameter(defaultValue = "install", property = "frontend.npm.arguments", required = false)
   private String arguments;

   /**
    * Additional environment variables to pass to the build.
    */
   @Parameter
   private Map<String, String> environmentVariables;

   /**
    * The directory where files generated by NPM are written.
    */
   @Parameter(property = "outputDirectory")
   private File outputDirectory;

   /**
    * The base directory for running all Node commands. (Usually the directory that contains
    * package.json)
    */
   @Parameter(defaultValue = "${basedir}", property = "workingDirectory")
   private File workingDirectory;

   /**
    * The base directory for installing node and npm.
    */
   @Parameter(property = "installDirectory")
   private File installDirectory;

   /**
    * Whether you should skip while running in the test phase (default is false)
    */
   @Parameter(property = "skipTests", defaultValue = "false")
   private Boolean skipTests;

   @Component
   private MojoExecution execution;

   @Override
   public void execute() throws MojoFailureException {
      if(skipTestPhase()) {
         getLog().info("Skipping execution");
         return;
      }

      if(installDirectory == null) {
         installDirectory = workingDirectory;
      }

      if(outputDirectory == null || !outputDirectory.exists()) {
         try {
            FrontendPluginFactory factory =
               new FrontendPluginFactory(workingDirectory, installDirectory);
            ProxyConfig proxyConfig = new ProxyConfig(Collections.emptyList());
            factory.getNpmRunner(proxyConfig, null).execute(arguments, environmentVariables);
         }
         catch(TaskRunnerException e) {
            throw new MojoFailureException("Failed to execute npm with arguments " + arguments, e);
         }
      }
      else {
         getLog().info("Skipping npm " + arguments + " as " + outputDirectory + " exists");
      }
   }

   /**
    * Determines if this execution should be skipped.
    */
   private boolean skipTestPhase() {
      return skipTests && isTestingPhase();
   }

   /**
    * Determines if the current execution is during a testing phase (e.g., "test" or "integration-test").
    */
   private boolean isTestingPhase() {
      String phase = execution.getLifecyclePhase();
      return "test".equals(phase) || "integration-test".equals(phase);
   }
}
